package ProjectEuler;

/*
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 * 731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949
 * 495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309
 * 871112172238311362229893423380308135336276614282806444486645238749303589072962904915604407723907138105158593079608667
 * 017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243525849077116705560
 * 136048395864467063244157221553975369781797784617406495514929086256932197846862248283972241375657056057490261407972968
 * 652414535100474821663704844031998900088952434506585412275886668811642717147992444292823086346567481391912316282458617
 * 866458359124566529476545682848912883142607690042242190226710556263211111093705442175069416589604080719840385096245544
 * 436298123098787992724428490918884580156166097919133875499200524063689912560717606058861164671094050775410022569831552
 * 0005593572972571636269561882670428252483600823257530420752963450
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this
 * product?
 *
 * Copyright © 2021 ProjectEuler.net
 * Source: https://projecteuler.net/problem=8
 */

class Problem8 {
    static long solveProblem() {
        long greatestProductOf13AdjacentDigits = 0L;
        String numberAsString = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698" +
                "4801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096" +
                "3295227443043557668966489504452445231617318564030987111217223831136222989342338030813533627661428280" +
                "6444486645238749303589072962904915604407723907138105158593079608667017242712188399879790879227492190" +
                "1699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670" +
                "6324415722155397536978179778461740649551492908625693219784686224828397224137565705605749026140797296" +
                "8652414535100474821663704844031998900088952434506585412275886668811642717147992444292823086346567481" +
                "3919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421" +
                "7506941658960408071984038509624554443629812309878799272442849091888458015616609791913387549920052406" +
                "3689912560717606058861164671094050775410022569831552000559357297257163626956188267042825248360082325" +
                "7530420752963450";
        String[] digitsAsStrings = numberAsString.split("");
        byte[] digits = new byte[numberAsString.length()];
        for (short i = 0; i < numberAsString.length(); i++) {
            long productOf13AdjacentDigits = 1L;
            byte digit = Byte.parseByte(digitsAsStrings[i]);
            if (digit != 0) {
                digits[i] = digit;
            }
            if (i > 12) {
                for (short j = (short) (i - 13); j < i; j++) {
                    productOf13AdjacentDigits *= digits[j];
                }
                if (productOf13AdjacentDigits > greatestProductOf13AdjacentDigits) {
                    greatestProductOf13AdjacentDigits = productOf13AdjacentDigits;
                }
            }
        }
        return greatestProductOf13AdjacentDigits;
    }
}
